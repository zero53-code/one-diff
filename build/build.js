/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Render_1 = __webpack_require__(/*! ./lily/core/vdom/Render */ \"./dist/lily/core/vdom/Render.js\");\nconst Diff_1 = __webpack_require__(/*! ./lily/core/vdom/diff/Diff */ \"./dist/lily/core/vdom/diff/Diff.js\");\nconst RemoveLastChildNodeChange_1 = __webpack_require__(/*! ./lily/core/vdom/diff/change/RemoveLastChildNodeChange */ \"./dist/lily/core/vdom/diff/change/RemoveLastChildNodeChange.js\");\nconst RemoveFirstChildNodeChange_1 = __webpack_require__(/*! ./lily/core/vdom/diff/change/RemoveFirstChildNodeChange */ \"./dist/lily/core/vdom/diff/change/RemoveFirstChildNodeChange.js\");\nconst InsertBeforeChildChange_1 = __webpack_require__(/*! ./lily/core/vdom/diff/change/InsertBeforeChildChange */ \"./dist/lily/core/vdom/diff/change/InsertBeforeChildChange.js\");\nconst InsertAfterChildChange_1 = __webpack_require__(/*! ./lily/core/vdom/diff/change/InsertAfterChildChange */ \"./dist/lily/core/vdom/diff/change/InsertAfterChildChange.js\");\nconst VElementNode_1 = __webpack_require__(/*! ./lily/core/vdom/vnode/VElementNode */ \"./dist/lily/core/vdom/vnode/VElementNode.js\");\nconst ProxyReactive_1 = __webpack_require__(/*! ./lily/core/reactive/ProxyReactive */ \"./dist/lily/core/reactive/ProxyReactive.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nconst Ref_1 = __webpack_require__(/*! ./lily/core/reactive/Ref */ \"./dist/lily/core/reactive/Ref.js\");\n// 测试 `VNode`\nfunction testVNode() {\n    console.log(\"================测试 `VNode`================\");\n    let vnode1 = VElementNode_1.default.create(\"div\", { class: \"DIV1111\", style: { color: \"red\" } });\n    vnode1.addChildElementNode(\"div\", {}).addChildTextNode(\"这是文本节点1\");\n    vnode1.addChildElementNode(\"div\", {}).addChildTextNode(\"这是文本节点2\");\n    vnode1.addChildTextNode(\"这是文本节点3\");\n    vnode1.addChildTextNode(\"这是文本节点4\");\n    let vnode2 = VElementNode_1.default.create(\"div\", { class: \"DIV2222\", style: { color: \"green\" } });\n    vnode2.addChildElementNode(\"div\", {}).addChildTextNode(\"这是文本节点A\");\n    vnode2.addChildElementNode(\"div\", {}).addChildTextNode(\"这是文本节点B\");\n    vnode2.addChildTextNode(\"这是文本节点C\");\n    vnode2.addChildTextNode(\"这是文本节点D\");\n    console.log(vnode1);\n    let node1 = (0, Render_1.renderTo)(vnode1, document.getElementById(\"root1\"));\n    let node2 = (0, Render_1.renderTo)(vnode2, document.getElementById(\"root2\"));\n    // 移除最后一个子节点\n    let change1 = new RemoveLastChildNodeChange_1.default(vnode1);\n    console.log(change1.apply());\n    // 移除第一个子节点\n    let change2 = new RemoveFirstChildNodeChange_1.default(vnode2);\n    console.log(change2.apply());\n}\nfunction testInsertNode() {\n    console.log(\"================测试 `InsertNode`================\");\n    let props = {\n        class: \"DIV1\",\n        style: {\n            color: \"red\",\n            \"line-height\": \"20px\",\n            \"text-align\": \"center\",\n            \"background-color\": \"skyblue\",\n            width: \"100px\",\n            height: \"20px\",\n            margin: \"10px\",\n        }\n    };\n    let vnodeParent = VElementNode_1.default.create(\"div\", {});\n    let ch1 = vnodeParent.addChildElementNode(\"div\", props);\n    let ch2 = vnodeParent.addChildElementNode(\"div\", props);\n    let ch3 = vnodeParent.addChildElementNode(\"div\", props);\n    let ch4 = vnodeParent.addChildElementNode(\"div\", props);\n    let ch5 = vnodeParent.addChildElementNode(\"div\", props);\n    ch1.addChildTextNode(\"Ch01\");\n    ch2.addChildTextNode(\"Ch02\");\n    ch3.addChildTextNode(\"Ch03\");\n    ch4.addChildTextNode(\"Ch04\");\n    ch5.addChildTextNode(\"Ch05\");\n    let new_ch1 = VElementNode_1.default.create(\"div\", props);\n    new_ch1.addChildTextNode(\"new_Ch01\");\n    let new_ch2 = VElementNode_1.default.create(\"div\", props);\n    new_ch2.addChildTextNode(\"new_Ch02\");\n    (0, Render_1.renderTo)(vnodeParent, document.getElementById(\"root1\"));\n    let insertChange1 = new InsertBeforeChildChange_1.default(vnodeParent, ch2, new_ch1);\n    let insertChange2 = new InsertAfterChildChange_1.default(vnodeParent, ch5, new_ch2);\n    let insertChange3 = new InsertAfterChildChange_1.default(vnodeParent, ch3, ch5);\n    setTimeout(() => {\n        insertChange1.apply();\n        insertChange2.apply();\n        insertChange3.apply();\n    }, 1000);\n}\n// 测试 `propsPatch`\nfunction testPropsPatch01() {\n    console.log(\"================测试 `propsPatch` 01================\");\n    let vnode1 = VElementNode_1.default.create(\"div\", {\n        class: \"DIV1\",\n        \"width\": \"100px\",\n        style: {\n            color: \"red\",\n            \"background-color\": \"blue\"\n        }\n    });\n    let vnode2 = VElementNode_1.default.create(\"div\", {\n        class: \"DIV2\",\n        \"v-if\": \"???\",\n        style: {\n            color: \"green\",\n            \"background-color\": \"lightyellow\"\n        }\n    });\n    vnode1.addChildTextNode(\"Node1 我的属性将发生变化\");\n    vnode2.addChildTextNode(\"Node2\");\n    let node1 = (0, Render_1.renderTo)(vnode1, document.getElementById(\"root1\"));\n    let node2 = (0, Render_1.renderTo)(vnode2, document.getElementById(\"root2\"));\n    setTimeout(() => {\n        console.log(\"================CHANGE================\");\n        let changes = (0, Diff_1.propsPatch)(vnode2, vnode1);\n        for (const change of changes) {\n            console.log(change);\n            change.apply();\n        }\n    }, 3000);\n}\n// 测试 `propsPatch`\nfunction testPropsPatch02() {\n    console.log(\"================测试 `propsPatch` 02================\");\n    let props = {\n        class: \"DIV1\",\n        style: {\n            color: \"red\",\n            \"background-color\": \"blue\",\n            width: \"100px\",\n            height: \"100px\",\n            margin: \"10px\",\n        }\n    };\n    let vnode1 = VElementNode_1.default.create(\"div\", props);\n    let vnode2 = VElementNode_1.default.create(\"div\", props);\n    let vnode3 = VElementNode_1.default.create(\"div\", props);\n    let vnode4 = VElementNode_1.default.create(\"div\", props);\n    vnode1.addChildTextNode(\"Node1\");\n    vnode2.addChildTextNode(\"Node2\");\n    vnode3.addChildTextNode(\"Node3\");\n    vnode4.addChildTextNode(\"Node4\");\n    let node1 = (0, Render_1.renderTo)(vnode1, document.getElementById(\"root1\"));\n    let node2 = (0, Render_1.renderTo)(vnode2, document.getElementById(\"root1\"));\n    let node3 = (0, Render_1.renderTo)(vnode3, document.getElementById(\"root1\"));\n    let node4 = (0, Render_1.renderTo)(vnode4, document.getElementById(\"root1\"));\n    setTimeout(() => {\n        console.log(\"================CHANGE================\");\n        let changedProps = {\n            class: \"DIV1\",\n            style: {\n                color: \"blue\",\n                \"background-color\": \"#f0f0f0\",\n                width: \"120px\",\n                height: \"120px\",\n                margin: \"10px\",\n            }\n        };\n        let changedVNode = VElementNode_1.default.create(\"div\", changedProps);\n        console.log(\"changedVNode: \", changedVNode);\n        let changes1 = (0, Diff_1.propsPatch)(changedVNode, vnode1);\n        let changes2 = (0, Diff_1.propsPatch)(changedVNode, vnode2);\n        let changes3 = (0, Diff_1.propsPatch)(changedVNode, vnode3);\n        let changes4 = (0, Diff_1.propsPatch)(changedVNode, vnode4);\n        for (const change of changes1) {\n            console.log(change);\n            change.apply();\n        }\n        for (const change of changes2) {\n            change.apply();\n        }\n        for (const change of changes3) {\n            change.apply();\n        }\n        for (const change of changes4) {\n            change.apply();\n        }\n    }, 3000);\n}\n// 测试 `textNodePatch`\nfunction testTextNodePatch() {\n    let node1 = VElementNode_1.default.create(\"div\", {});\n    let node2 = VElementNode_1.default.create(\"div\", {});\n    let textVNode1 = node1.addChildTextNode(\"Text Node 1\");\n    let textVNode2 = node2.addChildTextNode(\"Text Node 2: 我将替换为 Text Node 1\");\n    (0, Render_1.renderTo)(node1, document.getElementById(\"root1\"));\n    (0, Render_1.renderTo)(node2, document.getElementById(\"root2\"));\n    let changes = (0, Diff_1.textNodePatch)(textVNode1, textVNode2);\n    setTimeout(() => {\n        for (const change of changes) {\n            console.log(change);\n            change.apply();\n        }\n    }, 5000);\n}\n// 测试 `patch`\nfunction testPatch01() {\n    var _a;\n    console.log(\"================测试 `patch` 01 ================\");\n    let props = {\n        class: \"DIV1\",\n        style: {\n            color: \"red\",\n            \"font-size\": \"20px\",\n            \"line-height\": \"30px\",\n            \"text-align\": \"center\",\n            \"background-color\": \"skyblue\",\n            width: \"100px\",\n            height: \"30px\",\n            margin: \"10px\",\n        }\n    };\n    let old_vnodeParent = VElementNode_1.default.create(\"div\", {});\n    let old_ch1 = old_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, props), { key: 1 }));\n    let old_ch2 = old_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, props), { key: 2 }));\n    let old_ch3 = old_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, props), { key: 3 }));\n    let old_ch4 = old_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, props), { key: 4 }));\n    let old_ch5 = old_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, props), { key: 5 }));\n    old_ch1.addChildTextNode(\"Ch01\");\n    old_ch2.addChildTextNode(\"Ch02\");\n    old_ch3.addChildTextNode(\"Ch03\");\n    old_ch4.addChildTextNode(\"Ch04\");\n    old_ch5.addChildTextNode(\"Ch05\");\n    (0, Render_1.renderTo)(old_vnodeParent, document.getElementById(\"root1\"));\n    let new_props = JSON.parse(JSON.stringify(props));\n    new_props.style.backgroundColor = \"lightgreen\";\n    new_props.style.width = \"150px\";\n    new_props.style.height = \"40px\";\n    new_props.style.color = \"blue\";\n    let new_vnodeParent = VElementNode_1.default.create(\"div\", {});\n    new_vnodeParent.setKey(old_vnodeParent.getKey());\n    let new_ch2 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 2 }));\n    let new_ch3 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 3 }));\n    let new_ch4 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 4 }));\n    let new_ch5 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 5 }));\n    let new_ch6 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 6 }));\n    let new_ch7 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 7 }));\n    let new_ch8 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 8 }));\n    let new_ch1 = new_vnodeParent.addChildElementNode(\"div\", Object.assign(Object.assign({}, new_props), { key: 1 }));\n    new_ch1.addChildTextNode(\"Ch01\");\n    new_ch2.addChildTextNode(\"Ch02\");\n    new_ch3.addChildTextNode(\"Ch03\");\n    new_ch4.addChildTextNode(\"Ch04\");\n    new_ch5.addChildTextNode(\"Ch05\");\n    new_ch6.addChildTextNode(\"new_ch06\");\n    new_ch7.addChildTextNode(\"new_ch07\");\n    new_ch8.addChildTextNode(\"new_ch08\");\n    // new_ch1.setKey(old_ch1.getKey())\n    // new_ch2.setKey(old_ch2.getKey())\n    // new_ch3.setKey(old_ch3.getKey())\n    // new_ch4.setKey(old_ch4.getKey())\n    // new_ch5.setKey(old_ch5.getKey())\n    function clickButton() {\n        let changes = (0, Diff_1.patch)(new_vnodeParent, old_vnodeParent);\n        console.log(old_vnodeParent);\n        console.log(new_vnodeParent);\n        for (const change of changes) {\n            change.apply();\n        }\n    }\n    (_a = document.getElementById(\"btn\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", (event) => {\n        console.log(\"开始变化\");\n        clickButton();\n    });\n}\n// 测试 `patch`\nfunction testPatch02() {\n    var _a;\n    console.log(\"================测试 `patch` 02 ================\");\n    let props = {\n        class: \"DIV1\",\n        style: {\n            color: \"red\",\n            \"font-size\": \"20px\",\n            \"line-height\": \"30px\",\n            \"text-align\": \"center\",\n            \"background-color\": \"skyblue\",\n            width: \"100px\",\n            height: \"30px\",\n            margin: \"10px\",\n        }\n    };\n    let old_vnodeParent = (0, Render_1.h)(\"div\", {}, [\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 1 }), (0, Render_1.h)(\"ch01\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 2 }), (0, Render_1.h)(\"ch02\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 3 }), (0, Render_1.h)(\"ch03\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 4 }), (0, Render_1.h)(\"ch04\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 5 }), (0, Render_1.h)(\"ch05\")),\n    ]);\n    (0, Render_1.renderTo)(old_vnodeParent, document.getElementById(\"root1\"));\n    let new_vnodeParent = (0, Render_1.h)(\"div\", { key: old_vnodeParent.getKey() }, [\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 1 }), (0, Render_1.h)(\"ch01\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 13 }), (0, Render_1.h)(\"new-ch13\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 2 }), (0, Render_1.h)(\"ch02\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 8 }), (0, Render_1.h)(\"new-ch08\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 11 }), (0, Render_1.h)(\"new-ch11\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 3 }), (0, Render_1.h)(\"ch03\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 9 }), (0, Render_1.h)(\"new-ch09\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 10 }), (0, Render_1.h)(\"new-ch10\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 12 }), (0, Render_1.h)(\"new-ch12\")),\n    ]);\n    function clickButton() {\n        let changes = (0, Diff_1.patch)(new_vnodeParent, old_vnodeParent);\n        console.log(old_vnodeParent);\n        console.log(new_vnodeParent);\n        let timeout = 1000;\n        for (const change of changes) {\n            setTimeout(() => {\n                change.apply();\n            }, timeout);\n            timeout += 1000;\n            // change.apply()\n        }\n    }\n    (_a = document.getElementById(\"btn\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", (event) => {\n        console.log(\"开始变化\");\n        clickButton();\n    });\n}\n// 测试 `patch`\nfunction testPatch03() {\n    var _a;\n    console.log(\"================测试 `patch` 03 ================\");\n    let props = {\n        class: \"DIV1\",\n        style: {\n            color: \"red\",\n            \"font-size\": \"20px\",\n            \"line-height\": \"30px\",\n            \"text-align\": \"center\",\n            \"background-color\": \"skyblue\",\n            width: \"100px\",\n            height: \"30px\",\n            margin: \"10px\",\n        }\n    };\n    let old_vnodeParent = (0, Render_1.h)(\"div\", {}, [\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 1 }), (0, Render_1.h)(\"ch01\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 2 }), (0, Render_1.h)(\"ch02\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 3 }), (0, Render_1.h)(\"ch03\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 4 }), (0, Render_1.h)(\"ch04\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 5 }), (0, Render_1.h)(\"ch05\")),\n    ]);\n    (0, Render_1.renderTo)(old_vnodeParent, document.getElementById(\"root1\"));\n    let new_vnodeParent = (0, Render_1.h)(\"div\", { key: old_vnodeParent.getKey() }, [\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 5 }), (0, Render_1.h)(\"ch05\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 4 }), (0, Render_1.h)(\"ch04\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 3 }), (0, Render_1.h)(\"ch03\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 2 }), (0, Render_1.h)(\"ch02\")),\n        (0, Render_1.h)(\"div\", Object.assign(Object.assign({}, props), { key: 1 }), (0, Render_1.h)(\"ch01\")),\n    ]);\n    function clickButton() {\n        let changes = (0, Diff_1.patch)(new_vnodeParent, old_vnodeParent);\n        console.log(old_vnodeParent);\n        console.log(new_vnodeParent);\n        let timeout = 1000;\n        for (const change of changes) {\n            setTimeout(() => {\n                change.apply();\n            }, timeout);\n            timeout += 1000;\n            // change.apply()\n        }\n    }\n    (_a = document.getElementById(\"btn\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", (event) => {\n        console.log(\"开始变化\");\n        clickButton();\n    });\n}\nfunction testReactive01() {\n    const reactive = new ProxyReactive_1.default({ age: 13 }, (o, prop, newValue, oldValue, receiver) => {\n        console.log(\"binding: \", o, prop, newValue, oldValue, receiver);\n    });\n    setTimeout(() => {\n        reactive.value.age++;\n    }, 1000);\n    setTimeout(() => {\n        reactive.value.age++;\n    }, 2000);\n    setTimeout(() => {\n        reactive.value.age++;\n    }, 3000);\n    setTimeout(() => {\n        reactive.value.age++;\n    }, 4000);\n    setTimeout(() => {\n        console.log(\"reactive.value\", reactive.value);\n    }, 5000);\n}\nfunction testReactive02() {\n    const reactive = new ProxyReactive_1.default({ age: 13 }, (v) => {\n        console.log(\"binding 新值: \", v);\n    });\n    const eventEmitter = new EventEmitter();\n    eventEmitter.addListener(\"test\", (v) => {\n        reactive.listener(\"age\", v);\n    });\n    setTimeout(() => {\n        eventEmitter.emit(\"test\", 11);\n    }, 1000);\n    setTimeout(() => {\n        eventEmitter.emit(\"test\", 14);\n    }, 2000);\n    setTimeout(() => {\n        eventEmitter.emit(\"test\", 19);\n    }, 3000);\n    setTimeout(() => {\n        console.log(\"reactive.value\", reactive.value);\n    }, 4000);\n}\nfunction testRef() {\n    const ref = new Ref_1.default(\"h\", (v) => {\n        console.log(\"binding: \", v);\n    });\n    setTimeout(() => {\n        ref.value = \"e\";\n    }, 1000);\n    setTimeout(() => {\n        ref.value = \"l\";\n    }, 2000);\n    setTimeout(() => {\n        ref.value = \"l\";\n    }, 3000);\n    setTimeout(() => {\n        ref.value = \"o\";\n    }, 4000);\n    setTimeout(() => {\n        console.log(\"ref.value: \", ref.value);\n    }, 5000);\n}\n// testVNode()\n// testPropsPatch01()\n// testPropsPatch02()\n// testTextNodePatch()\n// testInsertNode()\n// testPatch01()\n// testPatch02()\n// testPatch03()\ntestReactive01();\n// testReactive02()\n// testRef()\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://lily/./dist/index.js?");

/***/ }),

/***/ "./dist/lily/core/reactive/ProxyReactive.js":
/*!**************************************************!*\
  !*** ./dist/lily/core/reactive/ProxyReactive.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass ProxyReactive {\n    constructor(value, binding) {\n        this._binding = binding;\n        this._listener = (prop, v) => {\n            Reflect.set(this.proxyObject, prop, v);\n            console.log(\"listener: \", this.proxyObject);\n        };\n        this.proxyObject = new Proxy(value, {\n            get(target, prop, receiver) {\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, v, receiver) {\n                const oldValue = Reflect.get(target, prop, receiver);\n                const result = Reflect.set(target, prop, v, receiver);\n                const newValue = Reflect.get(target, prop, receiver);\n                binding(target, prop, newValue, oldValue, receiver);\n                return result;\n            }\n        });\n    }\n    get binding() {\n        return this._binding;\n    }\n    get listener() {\n        return this._listener;\n    }\n    get value() {\n        return this.proxyObject;\n    }\n}\nexports[\"default\"] = ProxyReactive;\n//# sourceMappingURL=ProxyReactive.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/reactive/ProxyReactive.js?");

/***/ }),

/***/ "./dist/lily/core/reactive/Ref.js":
/*!****************************************!*\
  !*** ./dist/lily/core/reactive/Ref.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ref {\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        this._value = v;\n    }\n    get binding() {\n        return this._binding;\n    }\n    constructor(value, binding) {\n        this._value = value;\n        const that = this;\n        Object.defineProperty(this, \"value\", {\n            get() {\n                return this._value;\n            },\n            set(v) {\n                that._value = v;\n                binding(this._value);\n            }\n        });\n        this._binding = binding;\n    }\n}\nexports[\"default\"] = Ref;\n//# sourceMappingURL=Ref.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/reactive/Ref.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/Render.js":
/*!***************************************!*\
  !*** ./dist/lily/core/vdom/Render.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @author linwukang\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.h = exports.renderStyles = exports.renderProps = exports.render = exports.renderTo = void 0;\nconst VElementNode_1 = __webpack_require__(/*! ./vnode/VElementNode */ \"./dist/lily/core/vdom/vnode/VElementNode.js\");\nconst VTextNode_1 = __webpack_require__(/*! ./vnode/VTextNode */ \"./dist/lily/core/vdom/vnode/VTextNode.js\");\n/**\n * 将虚拟节点渲染到真实 DOM 元素上\n * @param vnode 需要渲染的虚拟节点\n * @param target 渲染目标\n * @returns 渲染得到的真实 DOM 节点\n *\n * @author linwukang\n */\nfunction renderTo(vnode, target) {\n    return target.appendChild(render(vnode));\n}\nexports.renderTo = renderTo;\n/**\n * 将虚拟节点渲染为真实 DOM 元素\n * @param vnode 需要渲染的虚拟节点\n * @returns 渲染得到的真实 DOM 节点\n *\n * @author linwukang\n */\nfunction render(vnode) {\n    if (vnode instanceof VTextNode_1.default) {\n        // 虚拟文本节点\n        let vTextNode = vnode;\n        let textNode = document.createTextNode(vTextNode.getText());\n        vTextNode.node = textNode;\n        return textNode;\n    }\n    else if (vnode instanceof VElementNode_1.default) {\n        // 虚拟元素节点\n        let vElement = vnode;\n        let element = document.createElement(vElement.getTagName());\n        renderProps(element, vElement.getTagProps());\n        vElement\n            .getChildren()\n            .map(childNode => render(childNode))\n            .forEach(node => element.appendChild(node));\n        vElement.node = element;\n        return element;\n    }\n    throw new Error('unknown node type');\n}\nexports.render = render;\n/**\n * 向真实 DOM 元素上渲染属性\n * @param element 真实 DOM 元素\n * @param props 需要渲染的属性\n * @returns 真实 DOM 节点\n *\n * @author linwukang\n */\nfunction renderProps(element, props) {\n    for (const propName in props) {\n        if (propName === 'style') {\n            renderStyles(element, props[propName]);\n        }\n        else if (props[propName] instanceof Object) {\n            element.setAttribute(propName, JSON.stringify(props[propName]));\n        }\n        else {\n            element.setAttribute(propName, props[propName]);\n        }\n    }\n    return element;\n}\nexports.renderProps = renderProps;\n/**\n * 向真实 DOM 元素上渲染样式\n * @param element 真实 DOM 元素\n * @param styles 需要渲染的样式\n * @returns 真实 DOM 节点\n *\n * @author linwukang\n */\nfunction renderStyles(element, styles) {\n    for (const styleName in styles) {\n        if (Object.prototype.hasOwnProperty.call(styles, styleName)) {\n            element.style.setProperty(styleName, styles[styleName]);\n        }\n    }\n    return element;\n}\nexports.renderStyles = renderStyles;\n/**\n * 创建虚拟 DOM 节点\n * @param tabNameOrText\n * @param props\n * @param children\n * @returns\n */\nfunction h(tabNameOrText, props, children) {\n    if (props === undefined && children === undefined) {\n        return VTextNode_1.default.create(tabNameOrText, undefined);\n    }\n    else {\n        props = props || {};\n        let newVElementNode = VElementNode_1.default.create(tabNameOrText, props);\n        children = children || [];\n        if (!Array.isArray(children)) {\n            children.setParentVNode(newVElementNode);\n            newVElementNode.getChildren().push(children);\n        }\n        else {\n            for (let i = 0; i < children.length; i++) {\n                children[i].setParentVNode(newVElementNode);\n                newVElementNode.getChildren().push(children[i]);\n            }\n        }\n        return newVElementNode;\n    }\n}\nexports.h = h;\n//# sourceMappingURL=Render.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/Render.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/Diff.js":
/*!******************************************!*\
  !*** ./dist/lily/core/vdom/diff/Diff.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @author linwukang\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.childNodePatch = exports.textNodePatch = exports.propsPatch = exports.patch = void 0;\nconst SameVNode_1 = __webpack_require__(/*! ./SameVNode */ \"./dist/lily/core/vdom/diff/SameVNode.js\");\nconst ReplaceNodeChange_1 = __webpack_require__(/*! ./change/ReplaceNodeChange */ \"./dist/lily/core/vdom/diff/change/ReplaceNodeChange.js\");\nconst ReplaceTextChange_1 = __webpack_require__(/*! ./change/ReplaceTextChange */ \"./dist/lily/core/vdom/diff/change/ReplaceTextChange.js\");\nconst InsertBeforeChildChange_1 = __webpack_require__(/*! ./change/InsertBeforeChildChange */ \"./dist/lily/core/vdom/diff/change/InsertBeforeChildChange.js\");\nconst InsertAfterChildChange_1 = __webpack_require__(/*! ./change/InsertAfterChildChange */ \"./dist/lily/core/vdom/diff/change/InsertAfterChildChange.js\");\nconst RemoveChildChange_1 = __webpack_require__(/*! ./change/RemoveChildChange */ \"./dist/lily/core/vdom/diff/change/RemoveChildChange.js\");\nconst SetAttributeChange_1 = __webpack_require__(/*! ./change/SetAttributeChange */ \"./dist/lily/core/vdom/diff/change/SetAttributeChange.js\");\nconst DeleteAttributeChange_1 = __webpack_require__(/*! ./change/DeleteAttributeChange */ \"./dist/lily/core/vdom/diff/change/DeleteAttributeChange.js\");\nconst VElementNode_1 = __webpack_require__(/*! ../vnode/VElementNode */ \"./dist/lily/core/vdom/vnode/VElementNode.js\");\nconst VTextNode_1 = __webpack_require__(/*! ../vnode/VTextNode */ \"./dist/lily/core/vdom/vnode/VTextNode.js\");\nfunction* patch(newNode, oldNode) {\n    if (!(0, SameVNode_1.sameVNode)(newNode, oldNode)) {\n        yield new ReplaceNodeChange_1.default(oldNode.getNode(), newNode);\n        return;\n    }\n    if (newNode instanceof VTextNode_1.default && oldNode instanceof VTextNode_1.default) {\n        yield* textNodePatch(newNode, oldNode);\n        return;\n    }\n    if (newNode instanceof VElementNode_1.default && oldNode instanceof VElementNode_1.default) {\n        yield* propsPatch(newNode, oldNode);\n        yield* childNodePatch(newNode, oldNode);\n        return;\n    }\n    throw new Error(\"not implemented\");\n}\nexports.patch = patch;\n/**\n * 比较两个虚拟节点属性的变化，并返回 {@link IChange} 的序列\n * {@link IChange} 序列中的 {@link IChange} 对象的目标是旧的虚拟节点所对应的真实 DOM 节点\n * @param newVNode 新的虚拟节点\n * @param oldVNode 旧的虚拟节点。必须是已渲染的节点，即 `oldVNode.getNode()` 不为 `null`\n * @returns 序列 {@link Generator<IChange>}\n *\n * @author linwukang\n */\nfunction* propsPatch(newVNode, oldVNode) {\n    let oldNode = oldVNode.getNode();\n    let newProps = newVNode.getTagProps();\n    let oldProps = oldVNode.getTagProps();\n    for (const prop in newProps) {\n        if (oldProps.hasOwnProperty(prop)) {\n            // 新的 props 有，旧的 props 也有的属性 prop\n            let newValue = newProps[prop];\n            let oldValue = oldProps[prop];\n            if (typeof newValue !== typeof oldValue) {\n                yield new SetAttributeChange_1.default(oldVNode, prop, newValue);\n            }\n            else if (newValue === oldValue) {\n                // 不发生 Change \n                // yield new NoChange(oldProps)\n            }\n            else {\n                yield new SetAttributeChange_1.default(oldVNode, prop, newValue);\n            }\n        }\n        else {\n            // 新的 props 有，旧的 props 没有的属性 prop\n            yield new SetAttributeChange_1.default(oldVNode, prop, newProps[prop]);\n        }\n    }\n    for (const key in oldProps) {\n        if (!newProps.hasOwnProperty(key)) {\n            // 旧的 props 有，新的 props 没有的属性 key\n            // 删除操作\n            yield new DeleteAttributeChange_1.default(oldNode, key);\n        }\n    }\n    return;\n}\nexports.propsPatch = propsPatch;\n/**\n * 比较两个虚拟文本节点的变化，并返回 {@link IChange} 的序列\n * {@link IChange} 序列中的 {@link IChange} 对象的目标是旧的虚拟文本节点所对应的真实 DOM 节点\n * @param newTextVNode 新的虚拟文本节点\n * @param oldTextVNode 旧的虚拟文本节点。必须是已渲染的节点，即 `oldTextVNode.getNode()` 不为 `null`\n * @returns 序列 {@link Generator<IChange>}\n *\n * @author linwukang\n */\nfunction* textNodePatch(newTextVNode, oldTextVNode) {\n    if (newTextVNode.getText() === oldTextVNode.getText()) {\n        return;\n    }\n    else {\n        yield new ReplaceTextChange_1.default(oldTextVNode.getNode(), newTextVNode.getText());\n        return;\n    }\n}\nexports.textNodePatch = textNodePatch;\nfunction* childNodePatch(newVNode, oldVNode) {\n    let newChildren = newVNode.getChildren();\n    let oldChildren = oldVNode.getChildren();\n    let newStartIdx = 0; // 新前\n    let newEndIdx = newChildren.length - 1; // 新后\n    let oldStartIdx = 0; // 旧前\n    let oldEndIdx = oldChildren.length - 1; // 旧后\n    let keyToOldIdx = undefined;\n    let idxInOld = undefined;\n    let movedIdx = new Set();\n    while (newStartIdx <= newEndIdx && oldStartIdx <= oldEndIdx) {\n        let newStartVNode = newChildren[newStartIdx]; // 新前虚拟节点\n        let newEndVNode = newChildren[newEndIdx]; // 新后虚拟节点\n        let oldStartVNode = oldChildren[oldStartIdx]; // 旧前虚拟节点\n        let oldEndVNode = oldChildren[oldEndIdx]; // 旧后虚拟节点\n        if (movedIdx.has(newStartIdx)) {\n            newStartIdx++;\n        }\n        else if (movedIdx.has(newEndIdx)) {\n            newEndIdx--;\n        }\n        else if (movedIdx.has(oldStartIdx)) {\n            oldStartIdx++;\n        }\n        else if (movedIdx.has(oldEndIdx)) {\n            oldEndIdx--;\n        }\n        else if ((0, SameVNode_1.sameVNode)(newStartVNode, oldStartVNode)) {\n            // 新前-旧前 命中\n            console.log(\"新前-旧前 命中\");\n            // console.log(newStartIdx, oldStartIdx);\n            // console.log(newStartVNode, oldStartVNode);\n            yield* patch(newStartVNode, oldStartVNode);\n            newStartIdx++;\n            oldStartIdx++;\n        }\n        else if ((0, SameVNode_1.sameVNode)(newEndVNode, oldEndVNode)) {\n            // 新后-旧后 命中\n            console.log(\"新后-旧后 命中\");\n            yield* patch(newEndVNode, oldEndVNode);\n            newEndIdx--;\n            oldEndIdx--;\n        }\n        else if ((0, SameVNode_1.sameVNode)(newStartVNode, oldEndVNode)) {\n            // 新前-旧后 命中\n            console.log(\"新前-旧后 命中\");\n            yield new InsertBeforeChildChange_1.default(oldVNode, oldStartVNode, oldEndVNode);\n            yield* patch(newStartVNode, oldEndVNode);\n            newStartIdx++;\n            oldEndIdx--;\n        }\n        else if ((0, SameVNode_1.sameVNode)(newEndVNode, oldStartVNode)) {\n            // 新后-旧前 命中\n            console.log(\"新后-旧前 命中\");\n            yield new InsertAfterChildChange_1.default(oldVNode, oldEndVNode, oldStartVNode);\n            yield* patch(newEndVNode, oldStartVNode);\n            newEndIdx--;\n            oldStartIdx++;\n        }\n        else {\n            console.log(\"未命中\");\n            if (keyToOldIdx === undefined) {\n                keyToOldIdx = createKeyToOldIdx(oldChildren, oldStartIdx, oldEndIdx);\n            }\n            else {\n                idxInOld = keyToOldIdx.get(newStartVNode.getKey());\n                if (idxInOld === undefined) {\n                    yield new InsertBeforeChildChange_1.default(oldVNode, oldStartVNode, newStartVNode);\n                    newStartIdx++;\n                }\n                else {\n                    let nodeToMove = oldChildren[idxInOld];\n                    yield new InsertBeforeChildChange_1.default(oldVNode, oldStartVNode, nodeToMove);\n                    yield* patch(newStartVNode, nodeToMove);\n                    movedIdx.add(idxInOld);\n                    newStartIdx++;\n                }\n            }\n        }\n    } // while end\n    if (oldStartIdx > oldEndIdx) {\n        let before = oldChildren[newStartIdx];\n        for (let index = newStartIdx; index <= newEndIdx; index++) {\n            yield new InsertAfterChildChange_1.default(oldVNode, before, newChildren[index]);\n            before = newChildren[index];\n        }\n    }\n    else if (newStartIdx > newEndIdx) {\n        for (let index = oldStartIdx; index <= oldEndIdx; index++) {\n            yield new RemoveChildChange_1.default(oldVNode, oldChildren[index]);\n        }\n    }\n}\nexports.childNodePatch = childNodePatch;\n/**\n * 从子节点的 key 映射到 index\n * @param oldChildren 子节点数组\n * @param startIdx 开始下标\n * @param endIdx 结束下标\n * @returns key 到 index 的 Map 集合\n */\nfunction createKeyToOldIdx(oldChildren, startIdx, endIdx) {\n    let keyToOldIdx = new Map();\n    for (let index = startIdx; index <= endIdx; index++) {\n        const key = oldChildren[index].getKey();\n        if (key !== undefined) {\n            keyToOldIdx.set(key, index);\n        }\n    }\n    return keyToOldIdx;\n}\n//# sourceMappingURL=Diff.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/Diff.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/SameVNode.js":
/*!***********************************************!*\
  !*** ./dist/lily/core/vdom/diff/SameVNode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @author linwukang\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sameVNode = void 0;\nconst VElementNode_1 = __webpack_require__(/*! ../vnode/VElementNode */ \"./dist/lily/core/vdom/vnode/VElementNode.js\");\nconst VTextNode_1 = __webpack_require__(/*! ../vnode/VTextNode */ \"./dist/lily/core/vdom/vnode/VTextNode.js\");\n/**\n * 判断两个虚拟节点是否为同样的节点\n * 同样的节点的依据：\n * - 两个虚拟节点的 `key` 相同\n * - 两个虚拟节点为 {@link VElementNode} 时，标签名相同\n * - 两个虚拟节点都为虚拟文本节点\n * @param vNode1 虚拟节点 1\n * @param vNode2 虚拟节点 2\n * @returns 相同返回 `ture`，不同返回 `false`\n *\n * @author linwukang\n */\nfunction sameVNode(vNode1, vNode2) {\n    return vNode1.getKey() === vNode2.getKey()\n        && ((vNode1 instanceof VElementNode_1.default\n            && vNode2 instanceof VElementNode_1.default\n            && vNode1.getTagName() === vNode2.getTagName())\n            ||\n                (vNode1 instanceof VTextNode_1.default\n                    && vNode2 instanceof VTextNode_1.default));\n}\nexports.sameVNode = sameVNode;\n//# sourceMappingURL=SameVNode.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/SameVNode.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/DeleteAttributeChange.js":
/*!******************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/DeleteAttributeChange.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 向目标元素删除属性\n *\n * @author linwukang\n */\nclass DeleteAttributeChange {\n    constructor(target, key) {\n        this.targetNode = target;\n        this.key = key;\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        this.targetNode.removeAttribute(this.key);\n        return true;\n    }\n}\nexports[\"default\"] = DeleteAttributeChange;\n//# sourceMappingURL=DeleteAttributeChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/DeleteAttributeChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/InsertAfterChildChange.js":
/*!*******************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/InsertAfterChildChange.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Render_1 = __webpack_require__(/*! ../../Render */ \"./dist/lily/core/vdom/Render.js\");\n/**\n * 插入到子节点之后\n *\n * @author linwukang\n */\nclass InsertAfterChildChange {\n    constructor(target, targetChildVNode, insertVNode) {\n        this.targetNode = target.getNode();\n        this.targetChildVNode = targetChildVNode;\n        this.insertVNode = insertVNode;\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        var _a;\n        let insertNode = this.insertVNode.getNode();\n        if (insertNode == null) {\n            insertNode = (0, Render_1.render)(this.insertVNode);\n        }\n        const nextSibling = (_a = this.targetChildVNode.getNode()) === null || _a === void 0 ? void 0 : _a.nextSibling;\n        if (nextSibling == null) {\n            this.targetNode.appendChild(insertNode);\n        }\n        else {\n            this.targetNode.insertBefore(insertNode, nextSibling);\n        }\n        return true;\n    }\n}\nexports[\"default\"] = InsertAfterChildChange;\n//# sourceMappingURL=InsertAfterChildChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/InsertAfterChildChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/InsertBeforeChildChange.js":
/*!********************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/InsertBeforeChildChange.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Render_1 = __webpack_require__(/*! ../../Render */ \"./dist/lily/core/vdom/Render.js\");\n/**\n * 插入到子节点之前\n *\n * @author linwukang\n */\nclass InsertBeforeChildChange {\n    constructor(target, targetChildVNode, insertVNode) {\n        this.targetNode = target.getNode();\n        this.targetChildVNode = targetChildVNode;\n        this.insertVNode = insertVNode;\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        let insertNode = this.insertVNode.getNode();\n        if (insertNode == null) {\n            insertNode = (0, Render_1.render)(this.insertVNode);\n        }\n        this.targetNode.insertBefore(insertNode, this.targetChildVNode.getNode());\n        return true;\n    }\n}\nexports[\"default\"] = InsertBeforeChildChange;\n//# sourceMappingURL=InsertBeforeChildChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/InsertBeforeChildChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/RemoveChildChange.js":
/*!**************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/RemoveChildChange.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 移除子节点\n *\n * @author linwukang\n */\nclass RemoveChildChange {\n    constructor(target, childNode) {\n        this.targetNode = target.getNode();\n        this.childNode = childNode.getNode();\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        this.targetNode.removeChild(this.childNode);\n        return true;\n    }\n}\nexports[\"default\"] = RemoveChildChange;\n//# sourceMappingURL=RemoveChildChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/RemoveChildChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/RemoveFirstChildNodeChange.js":
/*!***********************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/RemoveFirstChildNodeChange.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 移除第一个子节点\n *\n * @author linwukang\n */\nclass RemoveFirstChildNodeChange {\n    constructor(target) {\n        this.targetNode = target.getNode();\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        if (this.targetNode.firstChild != null) {\n            this.targetNode.removeChild(this.targetNode.firstChild);\n            return true;\n        }\n        return false;\n    }\n}\nexports[\"default\"] = RemoveFirstChildNodeChange;\n//# sourceMappingURL=RemoveFirstChildNodeChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/RemoveFirstChildNodeChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/RemoveLastChildNodeChange.js":
/*!**********************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/RemoveLastChildNodeChange.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 移除最后一个子节点\n *\n * @author linwukang\n */\nclass RemoveLastChildNodeChange {\n    constructor(targetNode) {\n        this.targetNode = targetNode.getNode();\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        if (this.targetNode.lastChild != null) {\n            this.targetNode.removeChild(this.targetNode.lastChild);\n            return true;\n        }\n        return false;\n    }\n}\nexports[\"default\"] = RemoveLastChildNodeChange;\n//# sourceMappingURL=RemoveLastChildNodeChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/RemoveLastChildNodeChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/ReplaceNodeChange.js":
/*!**************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/ReplaceNodeChange.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Render_1 = __webpack_require__(/*! ../../Render */ \"./dist/lily/core/vdom/Render.js\");\n/**\n * 节点替换\n *\n * @author linwukang\n */\nclass ReplaceNodeChange {\n    constructor(targetNode, newNode) {\n        this.targetNode = targetNode;\n        this.newNode = newNode;\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        if (this.targetNode.parentNode != null) {\n            let node = this.newNode.getNode();\n            this.targetNode.parentNode.replaceChild(node == null ? (0, Render_1.render)(this.newNode) : node, this.targetNode);\n            return true;\n        }\n        return false;\n    }\n}\nexports[\"default\"] = ReplaceNodeChange;\n//# sourceMappingURL=ReplaceNodeChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/ReplaceNodeChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/ReplaceTextChange.js":
/*!**************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/ReplaceTextChange.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 文本节点的文本替换\n *\n * @author linwukang\n */\nclass ReplaceTextChange {\n    constructor(target, text) {\n        this.target = target;\n        this.text = text;\n    }\n    getTarget() {\n        return this.target;\n    }\n    apply() {\n        this.target.nodeValue = this.text;\n        return true;\n    }\n}\nexports[\"default\"] = ReplaceTextChange;\n//# sourceMappingURL=ReplaceTextChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/ReplaceTextChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/diff/change/SetAttributeChange.js":
/*!***************************************************************!*\
  !*** ./dist/lily/core/vdom/diff/change/SetAttributeChange.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Render_1 = __webpack_require__(/*! ../../Render */ \"./dist/lily/core/vdom/Render.js\");\n/**\n * 向目标元素添加或修改属性\n *\n * @author linwukang\n */\nclass SetAttributeChange {\n    constructor(target, key, value) {\n        let node = target.getNode();\n        if (node != null) {\n            this.targetNode = node;\n            this.key = key;\n            this.value = value;\n        }\n        else {\n            throw new Error(target + \"不是一个已被渲染的虚拟元素节点\");\n        }\n    }\n    getTarget() {\n        return this.targetNode;\n    }\n    apply() {\n        (0, Render_1.renderProps)(this.targetNode, { [this.key]: this.value });\n        return true;\n    }\n}\nexports[\"default\"] = SetAttributeChange;\n//# sourceMappingURL=SetAttributeChange.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/diff/change/SetAttributeChange.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/vnode/AbstractVElementNode.js":
/*!***********************************************************!*\
  !*** ./dist/lily/core/vdom/vnode/AbstractVElementNode.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AbstractVNode_1 = __webpack_require__(/*! ./AbstractVNode */ \"./dist/lily/core/vdom/vnode/AbstractVNode.js\");\n/**\n * 虚拟 DOM 元素接口\n *\n * @author linwukang\n */\nclass AbstractVElementNode extends AbstractVNode_1.default {\n    getNode() {\n        return this.node;\n    }\n}\nexports[\"default\"] = AbstractVElementNode;\n//# sourceMappingURL=AbstractVElementNode.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/vnode/AbstractVElementNode.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/vnode/AbstractVNode.js":
/*!****************************************************!*\
  !*** ./dist/lily/core/vdom/vnode/AbstractVNode.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 抽象 DOM 虚拟节点\n * 定义了通用的属性和方法\n *\n * @author linwukang\n */\nclass AbstractVNode {\n    constructor() {\n        /**\n         * 父虚拟节点属性\n         * 类型只能是 AbstractVElementNode 的派生类或者null\n         */\n        this.parentVNode = null;\n        /**\n         * 真实 DOM 节点\n         * 未对虚拟节点进行渲染时为 null\n         * 对虚拟节点进行渲染后为对应的真实 DOM 节点\n         */\n        this.node = null;\n        /**\n         * 是否为注释\n         */\n        this.comment = false;\n        // this.key = keyCounter.next()\n        this.key = undefined;\n    }\n    setParentVNode(parentVNode) {\n        this.parentVNode = parentVNode;\n    }\n    getParentVNode() {\n        return this.parentVNode;\n    }\n    getKey() {\n        return this.key;\n    }\n    setKey(key) {\n        this.key = key;\n    }\n    getNode() {\n        return this.node;\n    }\n    isComment() {\n        return this.comment;\n    }\n}\nexports[\"default\"] = AbstractVNode;\n//# sourceMappingURL=AbstractVNode.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/vnode/AbstractVNode.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/vnode/VElementNode.js":
/*!***************************************************!*\
  !*** ./dist/lily/core/vdom/vnode/VElementNode.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AbstractVElementNode_1 = __webpack_require__(/*! ./AbstractVElementNode */ \"./dist/lily/core/vdom/vnode/AbstractVElementNode.js\");\nconst VTextNode_1 = __webpack_require__(/*! ./VTextNode */ \"./dist/lily/core/vdom/vnode/VTextNode.js\");\n/**\n * 虚拟 DOM 元素类\n *\n * @author linwukang\n */\nclass VElementNode extends AbstractVElementNode_1.default {\n    constructor(tagName, props, parentNode, childNodes) {\n        super();\n        this.tagName = tagName;\n        this.props = props;\n        super.parentVNode = parentNode != undefined ? parentNode : null;\n        this.childNodes = childNodes == undefined ? [] : childNodes;\n        this.node = null;\n        for (let propName in props) {\n            if (propName === 'key') {\n                super.key = props[propName];\n                delete props.key;\n                break;\n            }\n        }\n    }\n    /**\n     * 工厂方法创建一个虚拟节点\n     * @param name 虚拟节点的标签名\n     * @param props 虚拟节点的属性\n     * @returns 新建的虚拟节点\n     */\n    static create(name, props) {\n        return new VElementNode(name, props);\n    }\n    addChildElementNode(name, props) {\n        let newChildNode = VElementNode.create(name, props);\n        newChildNode.setParentVNode(this);\n        this.childNodes.push(newChildNode);\n        return newChildNode;\n    }\n    addChildTextNode(text) {\n        let newTextNode = VTextNode_1.default.create(text, this);\n        this.childNodes.push(newTextNode);\n        return newTextNode;\n    }\n    getTagName() {\n        return this.tagName;\n    }\n    getTagProps() {\n        return this.props;\n    }\n    getChildren() {\n        return this.childNodes;\n    }\n}\nexports[\"default\"] = VElementNode;\n//# sourceMappingURL=VElementNode.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/vnode/VElementNode.js?");

/***/ }),

/***/ "./dist/lily/core/vdom/vnode/VTextNode.js":
/*!************************************************!*\
  !*** ./dist/lily/core/vdom/vnode/VTextNode.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst AbstractVNode_1 = __webpack_require__(/*! ./AbstractVNode */ \"./dist/lily/core/vdom/vnode/AbstractVNode.js\");\n/**\n * 虚拟文本节点\n *\n * @author linwukang\n */\nclass VTextNode extends AbstractVNode_1.default {\n    constructor(text, parentNode) {\n        super();\n        this.text = text;\n    }\n    getText() {\n        return this.text;\n    }\n    static create(text, parentNode) {\n        return new VTextNode(text, parentNode);\n    }\n}\nexports[\"default\"] = VTextNode;\n//# sourceMappingURL=VTextNode.js.map\n\n//# sourceURL=webpack://lily/./dist/lily/core/vdom/vnode/VTextNode.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://lily/./node_modules/events/events.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/index.js");
/******/ 	
/******/ })()
;